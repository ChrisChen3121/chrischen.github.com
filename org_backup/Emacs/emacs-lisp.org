#+TITLE:Emacs-Lisp
#+KEYWORDS: emacs, Elisp
#+OPTIONS: H:2 toc:t num:3
#+LINK_UP: emacs.html
#+SETUPFILE: ~/github/notes/org-html-themes/setup/theme-readtheorg.setup
* veriable
** setq = set '
** incrementer
   (setq counter 0)            ; Let's call this the initializer.
   (setq counter (+ counter 1))    ; This is the incrementer.

* function
** The defun Special Form
*** description
**** The name of the symbol to which the function definition should be attached.
**** A list of the arguments that will be passed to the function. If no arguments will be passed to the function, this is an empty list, ().
**** Documentation describing the function. (Technically optional, but strongly recommended.)
**** Optionally, an expression to make the function interactive so you can use it by typing M-x and then the name of the function; or by typing an appropriate key or keychord.
**** The code that instructs the computer what to do: the body of the function definition.

*** definition
     (defun function-name (arguments...)
       "optional-documentation..."
       (interactive argument-passing-info)     ; optional
       body...)

*** example
     (defun multiply-by-seven (number)
       "Multiply NUMBER by seven."
       (interactive "p")                             ;using the prefix argument
       (message "The result is %d" (* 7 number)))

*** interactive parameter
    b
    The name of an existing buffer.
    f
    The name of an existing file.
    p
    The numeric prefix argument. (Note that this `p' is lower case.)
    r
    Point and the mark, as two numeric arguments, smallest first. This is the only code letter that specifies two successive arguments rather than one.

** let
*** definition
    (let ((variable value)(variable value)) body...)
*** example
    (let ((zebra 'stripes)
           (tiger 'fierce))
       (message "One kind of animal has %s and another is %s."
                zebra tiger))
** if
*** definition
     (if true-or-false-test
         action-to-carry-out-if-test-is-true)

     (if true-or-false-test
         action-to-carry-out-if-the-test-returns-true
       action-to-carry-out-if-the-test-returns-false)
*** example
     (if (> 5 4)                             ; if-part
         (message "5 is greater than 4!"))   ; then-part

     (if (> 4 5)                               ; if-part
         (message "4 falsely greater than 5!") ; then-part
       (message "4 is not greater than 5!"))   ; else-part

*** true & false
    false is nil
    true is anything else

** save-excursion
    saves the location of point and mark.
    #+begin_src elisp
    (message "We are %d characters into this buffer."
        (- (point)
            (save-excursion
                (goto-char (point-min)) (point))))
    #+end_src

** Common function
- message:
#+BEGIN_VERSE
Print a message in the echo area. The first argument is a string that can contain ‘%s’, ‘%d’,
or ‘%c’ to print the value of arguments that follow the string. The argument used by ‘%s’ must
be a string or a symbol; the argument used by ‘%d’ must be a number. The argument used by
‘%c’ must be an ascii code number; it will be printed as the character with that ascii code.
(Various other %-sequences have not been mentioned.)
#+END_VERSE
- buffer-name:
   Without an argument, return the name of the buffer, as a string.
- buffer-file-name:
   Without an argument, return the name of the file the buffer is visiting.
- current-buffer:
   Return the buffer in which Emacs is active; it may not be the buffer that is visible on the screen.
- other-buffer:
  Return the most recently selected buffer (other than the buffer passed to other-buffer as an argument and other than the current buffer).
- switch-to-buffer:
   Select a buffer for Emacs to be active in and display it in the current window so users can look at it. Usually bound to C-x b.
- set-buffer:
   Switch Emacs' attention to a buffer on which programs will run. Don't alter what the window is showing.
- buffer-size:
   Return the number of characters in the current buffer.
- point:
   Return the value of the current position of the cursor, as an integer counting the number of characters from the beginning of the buffer.
- point-min:
   Return the minimum permissible value of point in the current buffer. This is 1, unless narrowing is in effect.
- point-max:
   Return the value of the maximum permissible value of point in the current buffer. This is the end of the buffer, unless narrowing is in effect.
* Tags
** M-x visit-tags-table command and specify a TAG path
** M-x compile RET etags *.el RET
** M-. [fuctionName]
   will go to the function definition in src
* Two meanings of nil
*** the empty list.
     () nil  <= same thing
*** false
* lookup a complete list of veriable and function by keyword
M-x apropos RET keyword RET
