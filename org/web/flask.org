#+TITLE: Flask
#+KEYWORDS: flask, backend
#+OPTIONS: H:4 toc:2 num:3 ^:nil
#+LaTeX: t
#+LANGUAGE: en-US
#+AUTHOR: ChrisChen
#+EMAIL: ChrisChen3121@gmail.com
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+SETUPFILE: ../../org-templates/level-1.org
* WSGI
  Web Server Gateway Interface
  #+BEGIN_SRC python
    def application(environ, start_response):
        start_response('200 OK', [('Content-Type', 'text/html')])
        return '<h1>Hello, world!</h1>'
  #+END_SRC
  - environ: [dict] http request
  - start_response: a function to send response
  - return body(html)

* Context
  | Variable name | Context             | Description                                                              |
  |---------------+---------------------+--------------------------------------------------------------------------|
  | current_app   | Application context | The application instance for the active application                      |
  | g             | Application context | An object can use for temporary storage. reset with each request         |
  | request       | Request context     | The request object, which encapsulates a http request                    |
  | session       | Request context     | The user session, a dictionary storage shared by requests within session |

* Request hooks
  hook decorators
  - *before_first_request*: register a function to run before the first request
  - *before_request*: register a function to run before each request
  - *after_request*: register a function to run after each request if no unhandled exceptions occurred
  - *teardown_request*: register a function to run after each request even if unhandled exceptions occurred

* Response
** tuple
   - Form: (html, status_code, headerdict)

** *response* object
    #+BEGIN_SRC python
      from flask import make_response

      @app.route('/')
      def index():
          response = make_response('<h1>This document carries a cookie!</h1>')
          response.set_cookie('answer', '42')
          return response
    #+END_SRC

** redirect
   #+BEGIN_SRC python
     return redirect('http://www.example.com')
   #+END_SRC

** abort
   used for error handling
   - abort does not return control back to the function that calls it but gives control back to the web server by raising an exception.
   #+BEGIN_SRC python
     abort(404)
   #+END_SRC

* Jinja2 template engine
** Variable
   - Form: ={{ name }}=
   - Jinja2 recognizes variables of any typ
   #+BEGIN_SRC web
     <p>A value from a dictionary: {{ mydict['key'] }}.</p>
     <p>A value from a list: {{ mylist[3] }}.</p>
     <p>A value from a list, with a variable index: {{ mylist[myintvar] }}.</p>
     <p>A value from an object's method: {{ myobj.somemethod() }}.</p>
   #+END_SRC

** Filters
   | Filter name | Description                                 |
   |-------------+---------------------------------------------|
   | safe        | Renders the value without applying escaping |
   | capitalize  | Converts the first char to uppercase        |
   | lower       |                                             |
   | upper       |                                             |
   | title       |                                             |
   | trim        | Removes leading and trailing whitespace     |
   | striptags   | Removes any HTML tags                       |
   #+BEGIN_SRC web
     <h1>Hello, {{ name|capitalize }}!</h1>
   #+END_SRC

*** safe
    - Never use the safe filter on values that aren’t trusted, such as text entered by users on web forms.

** Control structures
*** if
    #+BEGIN_SRC web
      {% if user %}
          Hello, {{ user }}!
      {% else %}
          Hello, Stranger!
      {% endif %}
    #+END_SRC

*** for loop
    #+BEGIN_SRC web
      <ul>
          {% for comment in comments %}
              <li>{{ comment }}</li>
          {% endfor %}
      </ul>
    #+END_SRC

*** macro
    macro are similar to functions in Python code
    #+BEGIN_SRC web
      {% macro render_comment(comment) %}
          <li>{{ comment }}</li>
      {% endmacro %}

      <ul>
          {% for comment in comments %}
              {{ render_comment(comment) }}
          {% endfor %}
      </ul>
    #+END_SRC

**** import macro from standalone macro file
    #+BEGIN_SRC web
      {% import 'macros.html' as macros %}
      <ul>
          {% for comment in comments %}
              {{ macros.render_comment(comment) }}
          {% endfor %}
      </ul>
    #+END_SRC

*** include common file
    {% include 'common.html' %}

** Inheritance
   Block tags define elements that a derived template can change.
*** base template
     #+BEGIN_SRC web
       <html>
       <head>
           {% block head %}
           <title>{% block title %}{% endblock %} - My Application</title>
           {% endblock %}
       </head>
       <body>
           {% block body %}
           {% endblock %}
       </body>
       </html>
     #+END_SRC

*** extendsion template
    If the application needs to add its own content to a block that already has some content,
    then Jinja2’s super() function must be used.
     #+BEGIN_SRC web
       {% extends "base.html" %}
       {% block title %}Index{% endblock %}
       {% block head %}
           {{ super() }} <!--super() to retain the original contents -->
           <style>
           </style>
       {% endblock %}
       {% block body %}
       <h1>Hello, World!</h1>
       {% endblock %}
     #+END_SRC

** Custom Error Pages
   #+BEGIN_SRC python
     @app.errorhandler(404)
     def page_not_found(e):
         return render_template('404.html'), 404

     @app.errorhandler(500)
     def internal_server_error(e):
         return render_template('500.html'), 500
   #+END_SRC

** Links
   *url_for()* function to generate dynamic URLs from the imformation stored in the app's URL map.
   #+BEGIN_SRC python
     url_for('user', name='john', _external=True) # return http://localhost:5000/user/john
   #+END_SRC
   - arg1: view function name
   - args: view function args
   - =_external=: return an absolute URL

** Static files
   Flask looks for static files in a subdirectory called /static/ located in the application’s root folder.
   #+BEGIN_SRC python
     url_for('static', filename='css/styles.css', _external=True)
   #+END_SRC

* Web forms
  Form data from clients is in request.form (POST)
** flask_wtf
   /flask_wtf/ wraps the *WTForms* packages, handles two things:
   - generate HTML code for forms
   - validate the submitted form data

*** CSRF protection
    /flask_wtf/ uses token to verify the authenticity of requests with form data
    #+BEGIN_SRC python
      app = Flask(__name__)
      app.config['SECRET_KEY'] = 'hard to guess string'
    #+END_SRC
    - the *SECRET_KEY* configuration is aslo used by Flask and other third-party extendsions
    - For added security, the secret key should be stored in an environment variable
    instead of being embedded in the code.

*** Form class
    #+BEGIN_SRC python
      from flask_wtf import FlaskForm
      from wtforms import StringField, SubmitField
      from wtforms.validators import Required

      class NameForm(Form):
          name = StringField('What is your name?', validators=[Required()])
          submit = SubmitField('Submit')
    #+END_SRC
    - the *StringField* class represents an <input> element with a type="text" attribute
    - the *SubmitField* class represents an <input> element with a type="submit" attribute

**** Fields
     - Text field: StringField, TextAreaField, PasswordField, HiddenField, DateField, DateTimeField,
     IntegerField, DecimalField, FloatField
     - BooleanField: Checkbox with True and False values
     - RadioField: List of radio buttons
     - SelectField: Drop-down list of choices
     - SelectMultipleField: Drop-down list of choices with multiple selection
     - FileField: File upload field
     - SubmitField: Form submission button
     - FormField: Embed a form as a field in a container form
     - FieldList: List of fields of a given type

**** Validators
     Email, IPAddress, Length, NumberRange, Optional, Required, Regexp, URL, AnyOf, NoneOf
     - EqualTo: useful when requesting a password to be entered twice for confirmation

**** Template
     #+BEGIN_SRC web
       {% import "bootstrap/wtf.html" as wtf %}
       {{ wtf.quick_form(form) }}
     #+END_SRC

**** View function
     #+BEGIN_SRC python
       @app.route('/', methods=['GET', 'POST'])
       def index():
           name = None
           form = NameForm()
           if form.validate_on_submit():
               name = form.name.data
               form.name.data = ''
           return render_template('index.html', form=form, name=name)
     #+END_SRC
     - *methods* argument register the view function as a handler for GET and POST requests, default GET only.
     - *validate_on_submit* is True when the form was submitted and the data has been accepted by all the field validators

** redirect issue
   Browsers repeat the last request they have sent when they are asked to refresh the page.
   When the last request sent is a POST request with form data, a refresh would cause a duplicate
   form submission.
   - Good practice: never leave a POST request as a last request sent by the browser. Respond to POST requests with a redirect instead of a normal response.
   - The trick is known as the *Post/Redirect/Get* pattern.

** Sessions
   #+BEGIN_SRC python
     from flask import Flask, render_template, session, redirect, url_for

     @app.route('/', methods=['GET', 'POST'])
     def index():
         form = NameForm()
         if form.validate_on_submit():
             session['name'] = form.name.data
             return redirect(url_for('index'))
         return render_template('index.html', form=form, name=session.get('name'))
   #+END_SRC

** flash
   - To give the user a confirmation message after a request is completed
   #+BEGIN_SRC python
     from flask import flash

     old_name = session.get('name')
     if old_name is not None and old_name != form.name.data:
         flash('Looks like you have changed your name!')
   #+END_SRC

*** render messages
    The best place to render flashed messages is the /base/ template.
    - use get_flashed_messages() to retrieve the messages and render them
      #+BEGIN_SRC web
        {% for message in get_flashed_messages() %}
        <div class="alert alert-warning">
            <button type="button" class="close" data-dismiss="alert">&times;</button>
            {{ message }}
        </div>
        {% endfor %}
      #+END_SRC

* Databases
** ORMs/ODMs
   - SQLAlchemy
   - MongoEngine

** flask_sqlalchemy
   #+BEGIN_SRC python
     from flask.ext.sqlalchemy import SQLAlchemy

     basedir = os.path.abspath(os.path.dirname(__file__))

     app = Flask(__name__)
     app.config['SQLALCHEMY_DATABASE_URI'] =\
         'sqlite:///' + os.path.join(basedir, 'data.sqlite')
     app.config['SQLALCHEMY_COMMIT_ON_TEARDOWN'] = True

     db = SQLAlchemy(app)
   #+END_SRC

*** Model
    #+BEGIN_SRC python
      class Role(db.Model):
          __tablename__ = 'roles'
          id = db.Column(db.Integer, primary_key=True)
          name = db.Column(db.String(64), unique=True)
          users = db.relationship('User', backref='role', laze='dynamic')

          def __repr__(self):
              return '<Role %r>' % self.name

      class User(db.Model):
          __tablename__ = 'users'
          id = db.Column(db.Integer, primary_key=True)
          username = db.Column(db.String(64), unique=True, index=True)
          role_id = db.Column(db.Integer, db.ForeignKey('roles.id'))

          def __repr__(self):
              return '<User %r>' % self.username
    #+END_SRC

*** Relationship
    SQLAlchemy relationship options: backref, primaryjoin, lazy, uselist, order_by, secondary, secondaryjoin

*** Ops
**** Creating
     #+BEGIN_SRC python
     db = SQLAlchemy(app)

     db.drop_all()
     db.create_all()
     #+END_SRC

**** Inserting
     #+BEGIN_SRC python
       admin_role = Role(name='Admin')
       user_john = User(username='john', role=admin_role)
       db.session.add(admin_role)
       db.session.add(user_john)
     #+END_SRC
     or
     #+BEGIN_SRC python
       db.session.add_all([admin_role, user_john])
     #+END_SRC
     - commit
       #+BEGIN_SRC python
         db.session.commit()
       #+END_SRC
     - check
       #+BEGIN_SRC python
         print(admin_role.id)
       #+END_SRC

     - db.session.rollback()

**** Modifying
     #+BEGIN_SRC python
       admin_role.name = 'Administrator'
       db.session.add(admin_role)
       db.session.commit()
     #+END_SRC

**** Deleting
     #+BEGIN_SRC python
       db.session.delete(mod_role)
       db.session.commit()
     #+END_SRC

**** Querying
     #+BEGIN_SRC python
       Role.query.all()
       User.query.filter_by(role=admin_role).all()
       str(User.query.filter_by(role=user_role)) # check SQL query
     #+END_SRC

*** Integration with the Python Shell
    #+BEGIN_SRC python
      from flask_script import Shell
      from flask.ext.script import Manager
      manager = Manager(app)
      def make_shell_context():
          return dict(app=app, db=db, User=User, Role=Role)
      manager.add_command("shell", Shell(make_context=make_shell_context))
    #+END_SRC
*** Database Migrations
    use flask-migrate
    #+BEGIN_SRC python
      from flask_migrate import Migrate, MigrateCommand
      migrate = Migrate(app, db)
      manager.add_command('db', MigrateCommand)
    #+END_SRC
    #+BEGIN_SRC sh
      python main.py db init
      python main.py db migrate -m "initial migration"
      python main.py db upgrade
    #+END_SRC

* Application Structure
  #+BEGIN_SRC text
        ├── __init__.py
        ├── main/
            ├── __init__.py
            ├── errors.py
            ├── forms.py
            └── views.py
        ├── static/
        ├── templates/
        ├── email.py
        ├── models.py
        ├── migrations/
        ├── venv/
        ├── tests/
        ├── requirements.txt
        ├── config.py
        └── manage.py        launches the application and other application tasks.
  #+END_SRC
** Configuration Example
    #+BEGIN_SRC python
      import os
      basedir = os.path.abspath(os.path.dirname(__file__))

      class Config:
          SECRET_KEY = os.environ.get('SECRET_KEY') or 'hard to guess string'
          SQLALCHEMY_COMMIT_ON_TEARDOWN = True
          FLASKY_MAIL_SUBJECT_PREFIX = '[Flasky]'
          FLASKY_MAIL_SENDER = 'Flasky Admin <flasky@example.com>'
          FLASKY_ADMIN = os.environ.get('FLASKY_ADMIN')

          @staticmethod
          def init_app(app):
              pass

      class DevelopmentConfig(Config):
          DEBUG = True
          MAIL_SERVER = 'smtp.googlemail.com'
          MAIL_PORT = 587
          MAIL_USE_TLS = True
          MAIL_USERNAME = os.environ.get('MAIL_USERNAME')
          MAIL_PASSWORD = os.environ.get('MAIL_PASSWORD')
          SQLALCHEMY_DATABASE_URI = os.environ.get('DEV_DATABASE_URL') or \
              'sqlite:///' + os.path.join(basedir, 'data-dev.sqlite')

      class TestingConfig(Config):
          TESTING = True
          SQLALCHEMY_DATABASE_URI = os.environ.get('TEST_DATABASE_URL') or \
              'sqlite:///' + os.path.join(basedir, 'data-test.sqlite')

      class ProductionConfig(Config):
          SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL') or \
              'sqlite:///' + os.path.join(basedir, 'data.sqlite')

      config = {
          'development': DevelopmentConfig,
          'testing': TestingConfig,
          'production': ProductionConfig,

          'default': DevelopmentConfig
      }
    #+END_SRC

** Dynamic App Creation
    - /app/__init__.py/
    #+BEGIN_SRC python
      from flask import Flask, render_template
      from flask_bootstrap import Bootstrap
      from flask_mail import Mail
      from flask_moment import Moment
      from flask_sqlalchemy import SQLAlchemy
      from config import config

      bootstrap = Bootstrap()
      mail = Mail()
      moment = Moment()
      db = SQLAlchemy()

      def create_app(config_name):
          app = Flask(__name__)
          app.config.from_object(config[config_name])
          config[config_name].init_app(app)

          bootstrap.init_app(app)
          mail.init_app(app)
          moment.init_app(app)
          db.init_app(app)

          from main import main as main_blueprint # see below
          app.register_blueprint(main_blueprint)

          return app
    #+END_SRC

**** Blueprint
     A blueprint is similar to an application in that it can also define routes
     - /app/main/__init__.py/
     #+BEGIN_SRC python
       from flask import Blueprint
       main = Blueprint('main', __name__)
       from . import views, errors
     #+END_SRC
     - /app/main/error.py/
     #+BEGIN_SRC python
       from flask import render_template
       from . import main

       @main.app_errorhandler(404)
       def page_not_found(e):
           return render_template('404.html'), 404

       @main.app_errorhandler(500)
       def internal_server_error(e):
           return render_template('500.html'), 500
     #+END_SRC

** Launch Script
    - /app/manage.py/
      #+BEGIN_SRC python
        #!/usr/bin/env python
        import os
        from app import create_app, db
        from app.models import User, Role
        from flask_script import Manager, Shell
        from flask_migrate import Migrate, MigrateCommand

        app = create_app(os.getenv('FLASK_CONFIG') or 'default')
        manager = Manager(app)
        migrate = Migrate(app, db)

        def make_shell_context():
            return dict(app=app, db=db, User=User, Role=Role)
        manager.add_command("shell", Shell(make_context=make_shell_context))
        manager.add_command('db', MigrateCommand)

        if __name__ == '__main__':
            manager.run()
      #+END_SRC
    - add test command
      #+BEGIN_SRC python
        @manager.command
        def test():
            """Run the unit tests."""
            import unittest
            tests = unittest.TestLoader().discover('tests')
            unittest.TextTestRunner(verbosity=2).run(tests)
      #+END_SRC
      the function’s docstring is displayed in the help messages

** *Project Generator*
*** *cookiecutter*
    - cookiecutter-flask
    - cookiecutter-flask-restful
* RESTful API
** characteristics
*** Stateless
    A client request must contain all the information that is necessary to carry it out.
    The server must not store any state about the client that persists from one request to the next.
*** Cache
    Responses from the server can be labeled as *cacheable* or *noncacheable* so that
    clients (or intermediaries between clients and servers) can use a cache for optimization purposes.
*** Uniform Interface
    often HTTP, HTTPs
*** Layered System
    Proxy servers, caches, or gateways can be inserted between clients and servers
    as necessary to improve performance, reliability, and scalability.
*** Code-on-Demand
    Clients can optionally download code from the server to execute in their context.

** Request Methods
   | Request method | Target                  | Description                                        | HTTP status code |
   |----------------+-------------------------+----------------------------------------------------+------------------|
   | GET            | Individual resource URL | Obtain the resource                                |              200 |
   | GET            | Resource collection URL | Obtain the collection of resources                 |              200 |
   | POST           | Resource collection URL | Create a new resource and add it to the collection |              201 |
   | PUT            | Individual resource URL | Create/Modify an existing resource                 |              200 |
   | DELETE         | Individual resource URL | Delete a resource                                  |              200 |
   | DELETE         | Resource collection URL | Delete all resources in the collection             |              200 |
** URL
   =/api/v1.0/[collection]/[individual]=

** Error Handling
   - 200: OK
   - 201: Created
   - 400: Bad request
   - 403: Forbidden
   - 404: Not found
   - 405: Method not allowed
   - 500: internal server error
*** rehandle 404, 500
    404/500 are generated by Flask on its own and will usually return an HTML response
    #+BEGIN_SRC python
      @main.app_errorhandler(404)
      def page_not_found(e):
          if request.accept_mimetypes.accept_json and \
             not request.accept_mimetypes.accept_html:
              response = jsonify({'error': 'not found'})
              response.status_code = 404
              return response
          return render_template('404.html'), 404
    #+END_SRC
    - implement rest of errors
      #+BEGIN_SRC python
        # app/api/errors.py: API error handler for status code 403
        def forbidden(message):
            response = jsonify({'error': 'forbidden', 'message': message})
            response.status_code = 403
            return response
      #+END_SRC
** Authentication
*** flask-httpauth Usage
    #+BEGIN_SRC python
      from flask_httpauth import HTTPBasicAuth
      auth = HTTPBasicAuth()

      @auth.verify_password
      def verify_password(email, password):
          if email == '':
              g.current_user = AnonymousUser()
              return True
          user = User.query.filter_by(email = email).first()
          if not user:
              return False
          g.current_user = user
          return user.verify_password(password)
    #+END_SRC
    - protect a route with the *auth.login_required* decorator

*** Token-based Authentication
    #+BEGIN_SRC python
      class User(db.Model):
          # ...
          def generate_auth_token(self, expiration):
              s = Serializer(current_app.config['SECRET_KEY'],
                             expires_in=expiration)
              return s.dumps({'id': self.id})

          @staticmethod
          def verify_auth_token(token):
              s = Serializer(current_app.config['SECRET_KEY'])
              try:
                  data = s.loads(token)
              except:
                  return None
              return User.query.get(data['id'])
    #+END_SRC
**** Verification
     - /app/api_1_0/authentication.py/
    #+BEGIN_SRC python
      @auth.verify_password
      def verify_password(email_or_token, password):
          if email_or_token == '':
              g.current_user = AnonymousUser()
              return True
          if password == '':
              g.current_user = User.verify_auth_token(email_or_token)
              g.token_used = True
              return g.current_user is not None
          user = User.query.filter_by(email=email_or_token).first()
          if not user:
              return False
          g.current_user = user
          g.token_used = False
          return user.verify_password(password)

      @api.route('/token')
      def get_token():
          if g.current_user.is_anonymous() or g.token_used:
              return unauthorized('Invalid credentials')
          return jsonify({'token': g.current_user.generate_auth_token(
              expiration=3600), 'expiration': 3600})
    #+END_SRC

*** Serializing
    Model should implement *to_json* method and @staticmethod *from_json*

*** Pagination of Large Resource
    Example:
    #+BEGIN_SRC python
      @api.route('/posts/')
      def get_posts():
          page = request.args.get('page', 1, type=int)
          pagination = Post.query.paginate(
              page, per_page=current_app.config['FLASKY_POSTS_PER_PAGE'],
              error_out=False)
          posts = pagination.items
          prev = None
          if pagination.has_prev:
              prev = url_for('api.get_posts', page=page-1, _external=True)
          next = None
          if pagination.has_next:
              next = url_for('api.get_posts', page=page+1, _external=True)
          return jsonify({
              'posts': [post.to_json() for post in posts],
              'prev': prev,
              'next': next,
              'count': pagination.total
          })
    #+END_SRC

*** Use httpie to test API
    #+BEGIN_SRC sh
      http --json --auth : GET http://127.0.0.1:5000/api/v1.0/posts/
    #+END_SRC

* Extensions
** flask_script
   Command-Line Options

** flask_bootstrap
   base template blocks
   - doc, html_attribs, html, head, title, metas, styles, body_attribs, body, navbar, content, scripts

** flask_moment
   - Localization of dates and times

   client-side moment.js do the localization. /flask_moment/ module integrates moment.js into Jinja2 templates.

** flask_mail
   #+BEGIN_SRC python
     from flask_mail import Mail
     mail = Mail(app)

     msg = Message('test subject', sender='you@example.com',
                   recipients=['you@example.com'])
     msg.body = 'text body'
     msg.html = '<b>HTML</b> body'

     with app.app_context(): # send() uses current_app, so it needs to be executed with an activated application context.
         mail.send(msg)
   #+END_SRC
*** Simplify Mail Sending
    #+BEGIN_SRC python
      from flask_mail import Message

      app.config['FLASKY_MAIL_SUBJECT_PREFIX'] = '[Flasky]' #application-specific configuration
      app.config['FLASKY_MAIL_SENDER'] = 'Flasky Admin <flasky@example.com>' # application-specific configuration

      def send_email(to, subject, template, **kwargs):
          msg = Message(app.config['FLASKY_MAIL_SUBJECT_PREFIX'] + subject,
                        sender=app.config['FLASKY_MAIL_SENDER'], recipients=[to])
          msg.body = render_template(template + '.txt', **kwargs) # content can be rendered!
          msg.html = render_template(template + '.html', **kwargs)
          mail.send(msg)
    #+END_SRC

*** Configuration
    MAIL_HOSTNAME, MAIL_PORT, MAIL_USE_TLS, MAIL_USE_SSL, MAIL_USERNAME, MAIL_PASSWORD

*** Asynchronous Sending
    #+BEGIN_SRC python
      thr = Thread(target=send_async_email, args=[app, msg])
          thr.start()
    #+END_SRC

** flask_restful
