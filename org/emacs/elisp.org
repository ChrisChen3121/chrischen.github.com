#+TITLE: elisp
#+AUTHOR: ChrisChen
#+EMAIL: chrischen3121@gmail.com
#+OPTIONS: H:3 toc:2 num:2 ^:nil
#+LANGUAGE: en-US
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+SETUPFILE: ../../org-templates/level-1.org
* Char Representation
  - ~?\U, ?\u, ?\x, ?\101~
  - ~?^I, ?\C-I, ?\M-I ?\S-I~

* Symbol
  Symbols are a fundamental type of data in Lisp and are used extensively. A
  symbol in Lisp is a stand-alone word.
** Creating Symbols
   #+BEGIN_SRC elisp
     (symbol-name 'foo)

     ;; returns a newly-allocated, uninterned symbol whose name is NAME (which must be a string)
     (make-symbol "foo")

     ;; returns the interned symbol.  If OBARRAY is omitted, the value of the global variable 'obarray' is used
     (intern "foo" other-obarray)

     ;; returns the symbol in OBARRAY whose name is NAME, or‘nil’ if OBARRAY has no symbol with that name.
     (intern-soft "foo")

     ;; map on obarray
     (mapatoms functions &optional obarray)

     ;; deletes SYMBOL from the obarray OBARRAY
     (unintern symbol obarray)
   #+END_SRC

* Sequence
  an ordered set of elements
** lists
   #+BEGIN_SRC elisp
     (eq () nil) ; -> t
     (A 2 "A") ; A list of three elements.
   #+END_SRC
   A cons cell is made for each element.  The CAR slot of the cons cell holds
   the element, and its CDR slot refers to the next cons cell of the list, which
   holds the next element in the list. The CDR slot of the last cons cell is set
   to hold 'nil'.

** arrays(fixed-length)
* Special Symbols
  ~'nil~, ~'t~

* Special Forms
  Special forms are something like built-in macros, examples: ~if~, ~progn~

* defs
  - ~defconst~: ~defconst symbol value [doc-string]~, should not be changed by the user or by other programs.
  - ~defvar~: ~defvar symbol [value [doc-string]]~, define global variables
  - ~defun~: define global functions
  - ~let~: define local variables
  - ~flet~: define local functions

** examples
   #+BEGIN_SRC elisp
     (defvar bar 23
       "The normal weight of a bar.")
     (defconst float-pi 3.141592653589793
       "The value of Pi.")

     ;; (let ((variable value)
     ;;       (variable value)
     ;;       …)
     ;;   body…)
     (let ((a 5)
           (b 6))
       (+ a b))

     ;; (flet ((function_name (arguments)
     ;;                       ...function body...))
     ;;   ...body...)
     (flet ((f (n)
               (+ n 10))
            (g (n)
               (- n 3)))
       (g (f 5)))
   #+END_SRC

* Function Operator[#']
  ~#'sqrt~ will be converted to ~(function sqrt)~ by Lisp reader

* Print & Read
** Print
   - ~print~: computer-friendly print
   - ~prin1~: like ~print~ but not print ~#/newline~
   - ~princ~: human-friendly print
   - ~prin1-to-string~

** Read
   - ~read~: computer-friendly read
   - ~read-line~: human-friendly read(common lisp)

* Code & Data
  #+BEGIN_SRC elisp
    '(+ 1 2) ;data mode
    (+ 1 2) ;code mode
    (defvar *foo* '(+ 1 2))
    (eval *foo*)
  #+END_SRC
* List
** List Functions
*** ~cons~
   When you call ~cons~, the Lisp compiler typically allocates a small chunk of memory, the =cons cell=,
   that can hold two references to the objects being linked.
   #+BEGIN_SRC elisp
     (cons 'chicken 'cat) ; -> (CHICKEN . CAT) The dot in the middle makes this a cons cell
     (cons 'chicken 'nil) ; -> (CHICKEN) nil is a special symbol that is used to terminate a list in Lisp
     (cons 'chicken ())   ; -> (CHICKEN)
     (cons 'pork '(beef chicken))                 ; -> (PORK BEEF CHICKEN)
     (cons 'pork (cons 'beef (cons 'chicken ()))) ; -> what is really happening underneath

   #+END_SRC
   *In Lisp, a chain of cons cells and a list are exactly the same thing.*

*** ~car~ and ~cdr~
   #+BEGIN_SRC elisp
     (car '(pork beef chicken))              ; -> PORK
     (cdr '(pork beef chicken))              ; -> (BEEF CHICKEN)
     (car (cdr '(pork beef chicken)))        ; -> BEEF
     (cadr '(pork beef chicken))             ; -> BEEF shortcut
   #+END_SRC

*** others
   For convenience, Common Lisp has many functions built on top of the basic three,
   ~cons~, ~car~, and ~cdr~
   #+BEGIN_SRC elisp
     (list 'pork 'beef 'chicken) ; does the dirty work of creating all the cons cells
     '(pork beef chiken)         ; the same
   #+END_SRC

** Dotted List
*** a list without nil
   #+BEGIN_SRC elisp
     (cons 1 (cons 2 3)) ; -> (1 2 . 3)
   #+END_SRC
   This dot is basically Lisp’s way of saying, “I tried to print this structure you entered
   using list notation, but the last item in the list didn’t contain the usual nil I expected;
   instead, it contained 3.

*** alternative syntax for ~cons~
   Another way of thinking about this dot notation is to consider it as simply an
   alternate syntax for the cons command
   #+BEGIN_SRC elisp
     '(1 . (2 . (3 . nil))) ; -> (1 2 3)
   #+END_SRC

*** elegant represent pairs
    ~(cons 2 3)~ -> ~(2 . 3)~

** Circular Lists
   #+BEGIN_SRC elisp
     (defparameter foo '(1 2 3))
     (setf (cdddr foo) foo)
   #+END_SRC
** Association List(alist)
   They are not a very efficient way to store and retrieve data.
  #+BEGIN_SRC elisp
    (defvar *dict* '((key1 value1)
                     (key2 value2)
                     (key3 value3)))

    (push '(key1 . value4) *dict*)          ; add new item to the front
    (assoc 'key1 *dict*)                    ; to look up from the front and returns the first one
  #+END_SRC
* Data Structures
** Arrays
   #+BEGIN_SRC elisp
     (setf primes [2 3 5 7 11 13])
     (arrayp primes) ; -> T
     (aref primes 1) ; -> 3
     (setf (aref primes 1) 5) ; primes -> [2 5 5 7 11 13]
   #+END_SRC

** Hash Tables
   #+BEGIN_SRC elisp
     (setf x (make-hash-table))
     (gethash 'nope x) ; -> nil
     (setf (gethash 'nope x) 5)
   #+END_SRC

** Return Multiple Values
   #+BEGIN_SRC elisp
     (defun foo ()
       (values 3 7))
     (multiple-value-bind (a b) (foo) (* a b))
   #+END_SRC
** Structure(OOP)
   #+BEGIN_SRC elisp
     (defstruct person name age gender)
     (setf john (make-person :name "john"
                             :age 37
                             :gender "male"))
     (person-age john)
   #+END_SRC
* Meta Programming
** Quasiquoting[`]
   Quasiquoting is a technique that allows you to insert small bits of computer
   code into larger pieces of data.
  #+BEGIN_SRC elisp
    `(there are ,(+ 1 4) apples) ; -> there are 5 apples
    `(there are (+ 1 4) apples) ; -> there are (+ 1 4) apples
  #+END_SRC

* Loop
  - ~loop~: loop forever
* Useful Functions & Marcos
  - ~ash~: shift
  - ~car~, ~cdr~, ~cons~, ~cadr~, ~cadadr~, ...
  - ~defvar~, ~setq~, ~setf~, ~let~
  - ~cl-flet~: defining local function, ~cl-labels~
  - ~()~, ~'()~, ~'nil~, ~nil~ are all false
  - ~mapcar~, ~apply~
  - ~substitute-if~
  - set ops: ~set-difference~, ~intersection~, ~remove-duplicates~

** conditionals
   ~if~, ~when~, ~unless~, ~cond~, ~or~, ~case~, ~and~
*** ~when~, ~unless~
    Eliminates the pain of ~progn~
*** ~cond~
    The ~cond~ form is the classic way to do branching in
    Lisp. Through the liberal use of parentheses, it allows for an
    implicit ~progn~, can handle more than one branch, and can even
    evaluate several conditions in succession.
    - using last ~t~ condition to guarantee that at least the last
      branch will be evaluated.
*** ~case~
    - ~otherwise~ like ~default~ in other language

*** ~eq~, ~equal~, etc.
    - ~eq~: reference comparison
    - ~equal~: content comparison (look the same)
    - ~eql~: like ~eq~, but handles comparisons of numbers and characters (compare these types by value)
    - ~equalp~:like ~equal~, and it can compare strings with different capitalizations and
    can compare integers against floating-point numbers
    #+BEGIN_SRC elisp
      (equal 'apple 'apple)                   ; -> T
      (equal (list 1 2 3)
             (list 1 2 3))                    ; -> T
      (eq (list 1 2 3)
          (list 1 2 3))                       ; -> NIL
      (eq 3.4 3.4)                            ; -> NIL
      (eql 3.4 3.4)                           ; -> T
      (equalp "Bob Smith" "bob smith")        ; -> T strange!
      (equalp 0 0.0)                          ; -> T
    #+END_SRC

** ~push/assoc~ idiom
   The ~assoc~ command always returns the first item it finds in a list. Using
   the ~push~ and ~assoc~ commands together allows us to pretend that values in
   an alist are changing, while still preserving old values(keep history of all
   old values).

* Loading Process
- add to ~load-path~
- ~load-file~
- ~provide~, ~require~
** autoload
Things that can be auto-loaded generally involve anything "definable",
such as functions, macros, major or minor modes, groups, classes, and
so on.
#+BEGIN_SRC elisp
  (autoload 'some-function "some-file")

  ;;;###autoload
  (defun my-function ()
    ;; Source code...
    )

  ;;;###autoload
  (require 'helm)
#+END_SRC

** Eval after load
#+BEGIN_SRC elisp
  (with-eval-after-load 'helm
    ;; Code
    )
#+END_SRC

** use-package
