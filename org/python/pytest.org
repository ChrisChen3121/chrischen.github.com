#+TITLE: Pytest
#+KEYWORDS: python, test, pytest
#+OPTIONS: H:3 toc:2 num:3 ^:nil
#+LANGUAGE: en-US
#+AUTHOR: ChrisChen
#+EMAIL: ChrisChen3121@gmail.com
#+SETUPFILE: ../../org-templates/level-1.org
#+STARTUP: inlineimages
* Intro
** Test Discovery
   - Test files should be named ==test_<something>.py= or =<something>_test.py=.
   - Test methods and functions should be named =test_<something>=.
   - Test classes should be named =Test<Something>=.

** Useful Options
   - ~--collect-only~
   - ~-v, --verbose~
   - ~-x, --exitfirst~: useful when debugging a problem
   - ~-s, --capture=method~: method should be one of =fd|sys|no=. ~-s~ is shortcut for ~--capture=no~
   - ~–lf, --last-failed~: only run last failing tests, or use ~–ff, –failed-first~
   - ~-l, --showlocals~: local variables and their values are displayed with tracebacks for failing tests
   - ~--tb=style~: useful styles =short=, =line=, and =no=
   - ~--durations=N~: show N slowest setup/test durations (N=0 for all), helpful to speed up testing

** Plugin Options
   - ~--pdb~
   - ~--cov~, ~--cov-report=html~

* Markers
  Markers are one of the best ways to mark a subset of your test functions so that they can be run together.
  #+BEGIN_SRC python
    import pytest

    @pytest.mark.somemark
    def test_func():
        pass
  #+END_SRC
  #+BEGIN_SRC bash
    pytest -v -m 'some mark'
  #+END_SRC
** Skip Test on Some Versions
   #+BEGIN_SRC python
     @pytest.mark.skipif(tasks.__version__ < ​'0.2.0'​,
                         reason=​'not supported until version 0.2.0'​)
   #+END_SRC

** Parametrized
   Parametrized testing is a way to send multiple sets of data through the same test and
   have pytest report if any of the sets failed. ~@pytest.mark.parametrize~
   #+BEGIN_SRC python
     @pytest.mark.parametrize('arg1,arg2', [(1, 'arg2_value1'), (2, 'arg2_value2')])
   #+END_SRC

* Fixtures
** Tracing Fixture Execution
   - ~--setup-show~

** Data Fixture
   #+BEGIN_SRC python
     @pytest.fixture(name='show_on_result', scope='session')
     def a_tuple():
         return (1, 2, 3)
   #+END_SRC

** Fixtures for Resource
   #+BEGIN_SRC python
     @pytest.fixture()
     def resource():
         # Setup
         yield
         # Teardown
   #+END_SRC

** Specifying Fixtures with ~usefixtures~
   - ~@pytest.mark.usefixtures('fixture1', 'fixture2')~

** Fixture Scope
   function(default), class, module, session
*** Class Scope
    - need to use ~usefixtures~
   #+BEGIN_SRC python
     # class scope
     @pytest.fixture(scope=​'class'​)
     ​def​ class_scope():
         """A class scope fixture."""

     @pytest.mark.usefixtures(​'class_scope'​)
     class TestClass:
         def test_method(self):
             # use class_scope fixture
             pass
   #+END_SRC

** Autouse Fixture
   - ~@pytest.fixture(autouse=True)~

** Renaming Fixture
   - ~@pytest.fixture(name='simple')~
   - Use ~--fixtures~ option to list all the fixtures available for the test

** *Parametrizing Fixtures*
   - ~@pytest.fixture(params=tasks_to_try, ids=task_ids)~
   - With parametrized fixtures, every test function that uses that fixture will be called multiple times.
   - Use ~ids~ to specify fixture identities.
* Builtin Fixtures
** ~tmpdir~ & ~tmpdir_factory~
   - We get session scope temporary directories and files from the ~tmpdir_factory~ fixture, and function scope directories and files from the ~tmpdir~ fixture.
   #+BEGIN_SRC python
     a_dir = tmpdir_factory.mktemp(​'mydir'​)
     a_file = a_dir.join(​'something.txt'​)
     a_sub_dir = a_dir.mkdir(​'anything'​)
     another_file = a_sub_dir.join(​'something_else.txt'​)
     a_file.write(​'contents may settle during shipping'​)
     assert​ a_file.read() == ​'contents may settle during shipping'
   #+END_SRC

** request
   - Used with fixture parametrization ~request.param~

** pytestconfig
   - Adding command-line options via pytest_addoption should be done via plugins or in the =conftest.py= file at the top of your project directory structure.
     #+BEGIN_SRC python
       ​def​ pytest_addoption(parser):
           parser.addoption(​"--myopt"​, action=​"store_true"​,
                            help=​"some boolean option"​)
           parser.addoption(​"--foo"​, action=​"store"​, default=​"bar"​,
                            help=​"foo: bar or baz"​)
     #+END_SRC

  - Using options
    #+BEGIN_SRC python
      def​ test_option(pytestconfig):
          print​(​'"foo" set to:'​, pytestconfig.getoption(​'foo'​))
          print​(​'"myopt" set to:'​, pytestconfig.getoption(​'myopt'​))
    #+END_SRC

** cache
   Storing information about one test session and retrieving it in the next. examples: =--lf=, =--ff=
   - command line options: =--cache-show=, =--cache-clear=
   - ~cache.get~, ~cache.set~
   - By convention, key names start with the name of your application or plugin, followed by a /,
   and continuing to separate sections of the key name with /’s. The value you store can be anything
   that is convertible to json, since that’s how it’s represented in the .cache directory.
   - ~cache~ is function scope fixture, using ~request.config.cache~ in any other scopes.

** capsys
   - ~out, err = capsys.readouterr()~

** monkeypatch
   - ~setattr~, ~delattr~: Set/Delete an attribute.
   - ~setitem~, ~delitem~: Set/Delete a dictionary entry.
   - ~setenv~, ~delenv~: Set/Delete an environmental variable.
   - ~syspath_prepend~: Prepend path to ~sys.path~
   - ~chdir~: Change the current working directory.
   - examples:
   #+BEGIN_SRC python
     def​ test_def_prefs_change_home(tmpdir, monkeypatch):
         monkeypatch.setenv(​'HOME'​, tmpdir.mkdir(​'home'​))
         cheese.write_default_cheese_preferences()
         expected = cheese._default_prefs
         actual = cheese.read_cheese_preferences()
         assert​ expected == actual

     fake_home_dir = tmpdir.mkdir(​'home'​)
     monkeypatch.setattr(cheese.os.path, ​'expanduser'​,
                         (​lambda​ x: x.replace(​'~'​, str(fake_home_dir))))
   #+END_SRC
  - ~monkeypatch~ fixture functions can be in conjunction with ~unittest.mock~ to temporarily replace attributes with mock objects

** doctest_namespace
** recwarn
   - Examine ~warnings~ generated by code under test

* Mocks
  - ~mocker.patch~
  - ~mocker.patch.object~

* Asycnio
** ~pytest-asyncio~
   - ~@pytest.fixture~ can decorate coroutines or async generators
   - custom event loop
   - ~@pytest.mark.asyncio~

** ~asynctest~
*** Mock
   - ~asynctest.Mock(object)~
   - ~asynctest.create_autospec(class/func)~: to create mock objects
   - ~side_effect~ can be a function, an exception object or class or any iterable object.
   - Putting it all together
   #+BEGIN_SRC python
     import asynctest
     class TestCacheWithMagicMethods(asynctest.TestCase):
         async def test_one_user_added_to_cache(self):
             user = StubClient.User(1, "a.dmin")

             AsyncClientMock = asynctest.create_autospec(AsyncClient)

             transaction = asynctest.MagicMock()
             transaction.__aenter__.side_effect = AsyncClientMock

             cursor = asynctest.MagicMock()
             cursor.__aiter__.return_value = [user]

             client = AsyncClientMock()
             client.new_transaction.return_value = transaction
             client.get_users_cursor.return_value = cursor

             cache = {}

             # The user has been added to the cache
             nb_added = await cache_users_with_cursor(client, cache)

             self.assertEqual(nb_added, 1)
             self.assertEqual(cache[1], user)

             # The user was already there
             nb_added = await cache_users_with_cursor(client, cache)
             self.assertEqual(nb_added, 0)
             self.assertEqual(cache[1], user)
   #+END_SRC
*** Patching
    Patching is especially useful when one need a mock, but can't pass it as a parameter of the function to be tested.
    - When an object is hard to mock, it sometimes shows a *limitation in the design*: a coupling that is too tight
    #+BEGIN_SRC python
      with asynctest.patch("logging.debug") as debug_mock:
          await cache_users_async(client, cache)
      debug_mock.assert_called()

      # or
      @asynctest.patch("logging.error")
      @asynctest.patch("logging.debug")
      async def test_with_decorator(self, debug_mock, error_mock):
          ...
    #+END_SRC
