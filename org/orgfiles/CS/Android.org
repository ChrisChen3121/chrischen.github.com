#+TITLE: Android Development
#+KEYWORDS: Android
#+OPTIONS: H:3 toc:2 num:3 ^:nil
#+SETUPFILE: ../../configOrg/level1.org
#+OPTIONS: LaTeX:t
* Application Components
** Activity
#+BEGIN_VERSE
Provides a visual interface for user interaction.
Each activity supports one thing. E.g: viewing an email message
Application often comprise several activities.
#+END_VERSE
*** Navigation Through Activities
**** Tasks
- A task is a set of related activities
- And these related activities don't have to be part of the same application

**** The Task Backstack
- Backstack serves for back key
- When an activity is launched, it goes on top of the backstack
- When the activity is destoried, it is popped off the backstack

**** startActivityForResult()
#+BEGIN_VERSE
Invoke a callback method when the called activity finishes to return a result.
Started activity can call setResult(int resultCode, Intent data). Intent data is optional.
Result Code: RESULT_CANCELED, RESULT_OK, RESULT_FIRST_USER, also custom resultcodes.
#+END_VERSE

*** LifeCycle
#+ATTR_HTML: align="center"
[[file:../../resources/android/ActivityLifeCycle.png]]

**** States Description
- Resumed/Running: Visible, User interacting
- Paused: Visible, User not interacting, Can be terminated
- Stopped: Not visible, Can be terminated

**** onCreate()
1) Call super.onCreate()
2) Set the activity's content view
3) Retain reference to UI views as necessary
4) Configure views as necessary

**** onRestart()
Special processing needed only after having been stopped.

**** onStart()
1) Start when visible-only behaviors
2) Loading persistent application state

**** onResume()
Start foreground-only behaviors

**** onPause()
1) Shutdown foreground-only behaviors
2) Save persistent state

**** onStop()
#+BEGIN_VERSE
Cache state
*Note: May not be called if android kills your apps*
#+END_VERSE

**** onDestory()
#+BEGIN_VERSE
Release activity resources
*Note: May not be called if android kills your apps*
#+END_VERSE

**** Configuration Changes
#+BEGIN_VERSE
On configuration changes(keyboard, orientation), 
android usually kills the current activity and 
then restarts it.

If restarting is slow, we can:
#+END_VERSE
***** Retain an Object
#+BEGIN_VERSE
Hard to recompute data can be cached.

Override onRetainNonConfigurationInstance() to build & return such an object.
This callback function will be called between onStop() and onDestroy().

Call getLastNonConfigurationInstance() during onCreate()

Note:These methods have been deprecated in 
favor of methods in the Fragment class 

onSaveInstanceState()
onRestoreInstanceState()
#+END_VERSE

***** Manually Reconfiguration
Can prevent system from restarting.

1) Declare the configuration changes your activity handles in AndoridManifest.xml
   #+BEGIN_SRC xml
     <activity android:name=".MyActivity"
     android:configChanges=
     "orientation|screensize|keyboardHidden" …>
   #+END_SRC
2) Override onConﬁgurationChanged()

** Service
** BroadcastReceiver
** Content Provider

* Major Class
** Intent
A data structure that represents
- An operation to be performed
- An event that has occurred[fn:1]
*** Operation to Be Performed
#+BEGIN_VERSE
Intents provide a flexible language
for specifying operation to be performed
E.g: pick a contact, take a photo, dial a phone etc.
#+END_VERSE
*** Event
*** Fields
**** Action
#+BEGIN_VERSE
String representing desired operation.
Examples:
#+END_VERSE
| ACTION_DIAL | dial a number                      |
| ACTION_EDIT | display data to edit               |
| ACTION_SYNC | sychronize device data with server |
| ACTION_MAIN | start as initial activity of app   | 
Can be set by constructor or setAction() method.

**** Data
#+BEGIN_VERSE
Data associated with the intent.
Formatted as a uniform resource identifier(URI)

intent.setData(Uri.parse("tel:+1555555555"));
#+END_VERSE

**** Category
#+BEGIN_VERSE
Additional information about the components
that can handle the intent.
Example:
#+END_VERSE
- CATEGORY_BROWSABLE

  can be invoke by a browser to display data ref's by a URI
- CATEGORY_LAUNCHER
  #+BEGIN_VERSE
  can be the initial activity of a task &
  is listed in top-level app launcher
  #+END_VERSE
  
**** Type
#+BEGIN_VERSE
Specifies the mime type of the intent data
Example:
image/*, image/png, image/jpg 
text/plain, text/html

If *unspecified*, Android will infer the type.

Intent.setType(String type);
Intent.setDataAndType(Uri data, String type);
#+END_VERSE

**** Component
#+BEGIN_VERSE
The component that should receive this intent.
Use this when there's *exactly one* component that should
receive the intent.

Intent newInt = Intent(Context packageContext, Class<?> cls);
or 
setComponent(), setClass(), setClassName()
#+END_VERSE

**** Extras
#+BEGIN_VERSE
Add information associated with Intent 
Treated as a map (key-value pairs)
#+END_VERSE
#+BEGIN_SRC java
  Intent newInt = new Intent(Intent.ACTION_SEND);
  newInt.putExtra(android.content.Intent.EXTRA_EMAIL, new String[]{
          "aporter@cs.umd.edu", "ceo@microsoft.com",
          "potus@whitehouse.gov","mozart@musician.org"
      }
  );
#+END_SRC
putExtra(String name, String value);
putExtra(String name, float[] value);

**** Flags
#+BEGIN_VERSE
Specify how intent should be handled
#+END_VERSE
- FLAG_ACTIVITY_NO_HISTORY

  Don't put this activity in the history stack.

- FLAG_DEBUG_LOG_RESOLUTION
  #+BEGIN_VERSE
  Print extra logging information when this
  intent is processed.
  #+END_VERSE

intent.setFlags(Intent.FLAG_ACTIVITY_NO_HISTORY);
  



* SDK Manager Proxy
mirrors.neusoft.edu.cn 80

* Footnotes

[fn:1] Will be covered in broadcast receiver

