#+TITLE: C语言
#+KEYWORDS: C
#+OPTIONS: H:2 toc:2 num:3 ^:nil
#+SETUPFILE: ../../configOrg/level1.org
#+Latex: t
* windows下编译环境
** cl.exe
#+BEGIN_VERSE
将cl.exe所在目录加入系统变量[PATH]
C:/Program Files/Microsoft Visual Studio 9.0/VC/bin
#+END_VERSE
** 无法找到mspdb80.dll
方法：
1) 从Common7/IDE/下复制"msobj80.dll,mspdb80.dll,mspdbcore.dll,mspdbsrv.exe"到VC/Bin/下即可解决
2) 添加系统变量PAT：C:/Program Files/Microsoft Visual Studio 9.0/Common7/IDE
** cannot open file "kernel32.lib"
#+BEGIN_VERSE
设置系统变量：
（LIB）C:\Program Files\Microsoft SDKs\Windows\v6.0A\Lib;D:\Program Files\Microsoft Visual Studio 9.0\VC\lib
（INCLUDE）D:\Program Files\Microsoft Visual Studio 9.0\VC\include
#+END_VERSE
** 编译
*** 编译前运行vcvars32.bat
D:\Program Files\Microsoft Visual Studio 9.0\VC\bin\vcvars32.bat
* Hello World
** 字符格式化
| 格式  | 说明                                |
|-------+-------------------------------------|
| %3d   | 表示打印6位整型                     |
| %ld   | 长整型                              |
| %6.1f | 打印6位浮点型，".1"表示保留一位小数 |
| %f    | 表示float和double                   |
| %.0f  | 表示不打印小数点和小数部分          |
| %s    | 对应的字符串末尾必须有'\0'          |
** char
#+BEGIN_VERSE
单引号中的字符表示一个整型值。
ASCII码中：'9'-'0' = 9
char数组表示一个字符串，末尾需加上'\0'表示字符串结尾
#+END_VERSE
* 类型、运算符与表达式
** const符号
const限定的数组表示其所有元素的值都不能被修改。参数前使用表示函数体内不能修改。
** char
#+BEGIN_VERSE
char转换成int时，根据机器不同，可能出现负值。C定义保证了标准打印字符集中的字符不会是负值。
保持可移植性的做法是：在存储非字符数据时，最好指定signed或unsigned。
#+END_VERSE
** signed和unsigned关键字
#+BEGIN_VERSE
仅声明signed和unsigned的情况，默认都是int类型：
signed   ->  signed int 
unsigned  -> unsigned int
#+END_VERSE
** bool值
#+BEGIN_VERSE
true为非0，false为0
&&、||等逻辑运算，判定为真时表达式值为1
#+END_VERSE
** float
一般用于：
1) 为了在使用较大的数组时节省存储空间
2) 有时为了节省机器执行(双精度运算特别耗时)
** 关于函数参数的转换
#+BEGIN_VERSE
在没有函数原型的情况下，char与short类型将被转换为int，
float将被转换为double。
#+END_VERSE
** 位操作符
- "&"经常用于屏蔽某些位

   例： n = n & 0177 只保留了最后7位(0177=1111111)
- "|"经常用于将某些位赋为1

   例：一个set包含4位，0000为全关状态，set1 = 0100, set2 = 1000, set = set1 | set2即set中的两个开关被打开
- "<<" 左移n位，移入的新位赋予0。左移n位相当于乘以$2^n$
- ">>" 右移

  #+BEGIN_VERSE
  右移一个unsigned整数，移入的新位总是赋予0值。

  右移signed整数的话，有些机器上采用算术移位(arithmetic shift)，使用符号位填补。
  还有一些机器上采用逻辑移位，移入的新位赋予0值。
  #+END_VERSE
  #+begin_example
  1001 0101 >> 2
  结果：
  逻辑移位： 0010 0101
  算术移位： 1110 0101
  #+end_example
  #+BEGIN_VERSE
  关于signed整数内存中存储形式的补充。
  第一位为符号位，负数为1，正数为0。符号位后几位与对应的正数每一位取反。
  #+END_VERSE
  #+begin_example
  123   01111011
  -123  10000100
  #+end_example  
- "~"取反
  #+begin_example
  x = x & ~077 //077:11 1111 语句效果：将x最后六位设为0
  #+end_example
  x & ~077要比 x & 0177700的效果好，后者假定了x是一个16-bits数，移植性不好。
- "^"异或操作
  常用于：^0 保留原位  ^1取补，等同于"~"操作

** 条件语句
f为浮点型，n为整型。
#+begin_src c
  (n > 0) ? f : n
#+end_src
#+BEGIN_VERSE
该语句无论n是否大于0，返回的是float型。
浮点型相对于整形来说，是一个更大的数。
所以n < 0时，会对n作隐形转换转成浮点型，再返回。
#+END_VERSE

* 标准库
| 库名     | 说明                                   |
|----------+----------------------------------------|
| limits.h | 与机器和编译器有关的属性定义           |
| float.h  | 同上                                   |
| ctype.h  | 定义了一组与字符集无关的转换函数       |
| math.h   | 数学函数集，一般使用双精度类型的变量。 |
