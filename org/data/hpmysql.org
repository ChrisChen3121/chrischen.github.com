#+TITLE: High Performance MySQL
#+KEYWORDS: database, mysql, performance
#+OPTIONS: H:3 toc:2 num:3 ^:nil
#+LANGUAGE: en-US
#+AUTHOR: ChrisChen
#+EMAIL: ChrisChen3121@gmail.com
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+SETUPFILE: ../../org-templates/level-1.org
* Special SQL
** AUTOCOMMIT
   #+BEGIN_SRC sql
     SHOW VARIABLES LIKE 'AUTOCOMMIT';
     SET AUTOCOMMIT = 1;
   #+END_SRC
** Set isolation level
    #+BEGIN_SRC sql
      SET SESSION TRANSACTION ISOLATION LEVEL READ COMMITTED;
    #+END_SRC
* Storage Engine
   - InnoDB
   - MyISAM
   - Archive
   - OLTP: XtraDB, TokuDB, like InnoDB
   - Infobright: Column-oriented
   - Aria: successor to MyISAM, crash-safe
   - MySQL Cluster

** Change engine
*** ALTER TABLE
     #+BEGIN_SRC sql
       ALTER TABLE mytable ENGINE = InnoDB;
     #+END_SRC
     - row-by-row copy
     - inplace and slow
*** Dump and import
     Use *mysqldump*
     1. dump to text
     2. change create sql
     3. import
*** CREATE and SELECT
     #+BEGIN_SRC sql
       CREATE TABLE innodb_table LIKE myisam_table;
       ALTER TABLE innodb_table ENGINE=InnoDB;
       INSERT INTO innodb_table SELECT * FROM myisam_table;
     #+END_SRC
     For large volume data:
     #+BEGIN_SRC sql
       START TRANSACTION;
       INSERT INTO innodb_table SELECT * FROM myisam_table WHERE id BETWEEN x AND y;
       COMMIT;
     #+END_SRC
*** Online schema change
     /pt-online-schema-change/ (based on Facebookâ€™s online schema change technique)
* Benchmark
** What to Measure
*** Throughput
    Throughput is defined as the number of transactions per unit of time. The usual unit of measurement is
    transactions per second(TPS), although it is sometimes transactions per minute(TPM).

*** Response time or latency
    This measures the total time a task requires.

*** Concurrency
    Concurrency is an important but frequently misused and misunderstood metric. Concurrency benchmark shoud be
    the number of threads or connections doing work simultaneously.

*** Scalability

** Gathering Data on MySQL
   - specify user to execute *mysql* command
     =mysql_config_editor set  --user=username  --host=127.0.0.1 --port=3306 --password=

   - a sample shell script that you can use to gather data on MySQL during benchmarks
   #+BEGIN_SRC sh
     #!/bin/sh
     INTERVAL=5
     PREFIX=$INTERVAL-sec-status
     RUNFILE=/home/benchmark/running
     mysql -e 'SHOW GLOBAL VARIABLES' >> mysql-variables
     while test -e $RUNFILE; do
         file=$(date +%F_%I)
         sleep=$(date +%s.%N | awk "{print $INTERVAL - (\$1 % $INTERVAL)}")
         sleep $sleep
         ts="$(date +"TS %s.%N %F %T")"
         loadavg="$(uptime)"
         echo "$ts $loadavg" >> $PREFIX-${file}-status
         mysql -e 'SHOW GLOBAL STATUS' >> $PREFIX-${file}-status &
         echo "$ts $loadavg" >> $PREFIX-${file}-innodbstatus
         mysql -e 'SHOW ENGINE INNODB STATUS\G' >> $PREFIX-${file}-innodbstatus &
         echo "$ts $loadavg" >> $PREFIX-${file}-processlist
         mysql -e 'SHOW FULL PROCESSLIST\G' >> $PREFIX-${file}-processlist &
         echo $ts
     done
     echo Exiting because $RUNFILE does not exist.

   #+END_SRC

** Analyzing Results
   #+BEGIN_SRC awk
     #!/bin/sh
     awk '
     BEGIN {
       printf "#ts date time load QPS";
       fmt = " %.2f";
     }
     /^TS/ { # The timestamp lines begin with TS.
       ts = substr($2, 1, index($2, ".") - 1);
       load = NF - 2;
       diff = ts - prev_ts;
       prev_ts = ts;
       printf "\n%s %s %s %s", ts, $3, $4, substr($load, 1, length($load)-1);
     }
     /Queries/ {
       printf fmt, ($2-Queries)/diff;
       Queries=$2
     }
     ' "$@"
   #+END_SRC
*** plot
    #+BEGIN_SRC sh
      gnuplot> plot "filename" using 5 w lines title "QPS"
    #+END_SRC

** Tools
*** http_load
*** MySQL Benchmark Suite
    =mysqltest=
*** *sysbench*
**** cpu
     #+BEGIN_SRC sh
       sysbench cpu --cpu-max-prime=20000 --threads=4 run
     #+END_SRC

**** fileio
     | IO mode | description                |
     |---------+----------------------------|
     | seqwr   | Sequential write           |
     | seqrewr | Sequential rewrite         |
     | seqrd   | Sequential read            |
     | rndrd   | Random read                |
     | rndwr   | Random write               |
     | rndrw   | Combined random read/write |
     #+BEGIN_SRC sh
       sysbench fileio --file-total-size=21G prepare
       sysbench fileio --file-total-size=21G --file-test-mode=rndrw \
                --time=300 --max-requests=0 --threads=4 run
     #+END_SRC

**** oltp
     #+BEGIN_SRC sh
       sysbench --db-driver=mysql --mysql-host=127.0.0.1 --mysql-user=sbtest --mysql-password=test1234 \
                --mysql-db=test --table-size=100000 /usr/local/share/sysbench/oltp_common.lua prepare
       sysbench --db-driver=mysql --mysql-host=127.0.0.1 --mysql-user=sbtest --mysql-password=test1234 \
                --mysql-db=test --table-size=100000 /usr/local/share/sysbench/oltp_read_write.lua \
                --threads=4 run
     #+END_SRC

*** TPC-C
    TPC-C is a specification published by the TPC organization that emulates a complex online transaction-processing load.
**** dbt2
**** TPPC-MySQL
* Profiling
  - execution-time profiling
  - wait analysis
** slow query log
   related variables: =slow_query_log=, =long_query_time=
   - low-overhead on I/O-bound workloads
   - high-fidelity

*** pt-query-digest
    Analyze MySQL queries from logs, processlist, and tcpdump.
    =pt-query-digest [log_file]=

*** tcpdump
    Use =tcpdump= to capture TCP network traffic and inspecting it, then
    - use =pt-query-digest --type=tpcdump= to decode the MySQL client/server protocol

** Single Query Profiling
*** performance_schema
    #+BEGIN_SRC sql
      UPDATE performance_schema.setup_instruments SET ENABLED = 'YES', TIMED = 'YES' WHERE NAME LIKE '%statement/%';
      UPDATE performance_schema.setup_instruments SET ENABLED = 'YES', TIMED = 'YES' WHERE NAME LIKE '%stage/%';
      UPDATE performance_schema.setup_consumers SET ENABLED = 'YES' WHERE NAME LIKE '%events_statements_%';
      UPDATE performance_schema.setup_consumers SET ENABLED = 'YES' WHERE NAME LIKE '%events_stages_%';

      SELECT EVENT_ID, TRUNCATE(TIMER_WAIT/1000000000000,6) as Duration, SQL_TEXT
      FROM performance_schema.events_statements_history_long
      WHERE ... /*same as SHOW PROFILES*/

      SELECT event_name AS Stage, TRUNCATE(TIMER_WAIT/1000000000000,6) AS Duration
      FROM performance_schema.events_stages_history_long
      WHERE NESTING_EVENT_ID=... /*same as SHOW PROFILE FOR QUERY*/
    #+END_SRC
    results in =performance_schema.events_statements_history_long=

*** SHOW PROFILE[deprecated]
    #+BEGIN_SRC sql
      SET profiling=1;

      SHOW PROFILES;
      SHOW PROFILE FOR QUERY [Query_ID];
    #+END_SRC

*** SHOW STATUS
   #+BEGIN_SRC sql
     FLUSH STATUS;
     SHOW STATUS WHERE Variable_name LIKE 'Handler%' OR Variable_name LIKE 'Created%';
   #+END_SRC
*** EXPLAIN
   #+BEGIN_SRC sql
     EXPLAIN [SQL_QUERY]
   #+END_SRC

** Server-Wide Problem Detection
*** sysstat
    - iostat, vmstat
*** SHOW GLOBAL STATUS
    Run =SHOW GLOBAL STATUS= periodically, gather Threads_running, Threads_connected, Questions, and Queries.
    #+BEGIN_SRC sh
      mysqladmin ext -i1 -p | awk '
          /Queries/{q=$4-qp;qp=$4}
          /Threads_connected/{tc=$4}
          /Threads_running/{printf "%5d %5d %5d\n", q, tc, $4}'
    #+END_SRC
*** SHOW PROCESSLIST
    #+BEGIN_SRC sh
      mysql -e 'SHOW PROCESSLIST\G' -p | grep State: | sort | uniq -c | sort -rn
    #+END_SRC
**** other approaches
     - PROCESSLIST table
    #+BEGIN_SRC sql
      SELECT * FROM INFORMATION_SCHEMA.PROCESSLIST;
    #+END_SRC
    - =innotop= command
*** SHOW INNODB STATUS
*** analyze slow log
    #+BEGIN_SRC sh
      awk '/^# Time:/{print $3, $4, c;c=0}/^# User/{c++}' slow-query.log
    #+END_SRC

*** *oprofile*
    primary Linux system profiling tool

*** *pt-stalk*
    Collect forensic data about MySQL when problems occur.
    - =pt-sift=: Browses files created by =pt-stalk=

*** =pt-mysql-summary= & =pt-summary=
*** *pt-pmp*
    Aggregate GDB stack traces for a selected program

** Tools
*** USER_STATISTICS
    =SHOW TABLES FROM INFORMATION_SCHEMA LIKE '%_STATISTICS';= in MariaDB
*** strace
    Use =strace= to intercepts system calls
    #+BEGIN_SRC sh
      strace -cfp [PID]
    #+END_SRC
