#+TITLE: C++ 点滴
#+KEYWORDS: C++
#+OPTIONS: H:2 toc:2 num:3 ^:nil
#+SETUPFILE: ../configOrg/level1.org
* 对象初始化
- 原因：总是使用花括号进行初始化{}，当隐式转换精度变小时编译器将会报错。
#+BEGIN_SRC cpp
  double pi = 3.1415926536;
  int a(pi), b = pi; //丢失精度
  // int c{pi}, d = {pi}; //编译报错：good!
#+END_SRC
* 指针和引用
** 常量指针和引用
- 指向常量的指针没有规定其所指对象必须是一个常量(该值仍可以通过其他方式改变)。引用也一样。
** const指针
  #+BEGIN_SRC cpp
    int val = 0;
    int val2 = 1;
    int *const pi = &val; //指向整形的常量指针 top-level const
    pi = &val2; // error: assignment of read-only variable ‘pi’

    const int *pci = &val; //指向常量整形的指针 low-level const
    ,*pci = 2; // error: assignment of read-only location ‘* pci’
  #+END_SRC
* 类型
*** 类型别名

以下两个语句等价：
#+BEGIN_SRC cpp
  typedef double wages;
  using wages = double;
#+END_SRC
*** 类型推断
#+BEGIN_VERSE
auto vs decltype 区别：
auto会忽略掉top-level const，decltype则保留
使用decltype时，给变量名加上括号会把它变为表达式。
变量是一种可以作为赋值左值的特殊表达式，decltype会得到引用类型
#+END_VERSE
#+BEGIN_SRC cpp
  int i = 0;
  decltype(i) a = 3;
  decltype((i)) b = 5; //错误： b为int &
  decltype((i)) c = i; //正确
#+END_SRC
