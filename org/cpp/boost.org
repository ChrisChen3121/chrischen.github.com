#+TITLE: boost cookbook
#+KEYWORDS: c++, boost
#+OPTIONS: H:3 toc:2 num:3 ^:nil
#+LANGUAGE: en-US
#+AUTHOR: ChrisChen
#+EMAIL: ChrisChen3121@gmail.com
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://gongzhitaao.org/orgcss/org.css"/>
* Data Structure
** any
*** how it works
    On the assignment of some variable of type T, Boost.Any instantiates a holder<T> type that may store
    a value of the specified type T and is derived from some base-type placeholder.
    #+BEGIN_SRC cpp
      struct placeholder {
        virtual ~placeholder() {}
        virtual const std::type_info &type() const = 0;
      };

      template <typename ValueType> struct holder : public placeholder {
        virtual const std::type_info &type() const { return typeid(ValueType); }
        ValueType held;
      };
    #+END_SRC
    ~boost::any~ stores a pointer ~ptr~ to placeholder.
    - ~any_cast<T>()~: ~ptr->type()~ -> checks ~type_info==typeid(T)~ -> returns ~static_cast<holder<T>*>(ptr)->held~

** variant
   Boost variant emulates a union but it does not use a union in its implementation. Instead it uses aligned storage and placement new.
   You have to manage the construction and destruction of non POD types by yourself when you use C++11 unions.
*** hints
    - To achieve maximum performance, make sure that there is a simple type in the list of supported types at the first position, such as boost::blank
*** ~boost::apply_visitor~
    #+BEGIN_SRC cpp
      typedef boost::variant<int, float, std::string> cell_t;
      struct db_sum_visitor : public boost::static_visitor<double> {
        double operator()(int value) const { return value; }
        double operator()(float value) const { return value; }
        double operator()(const std::string & /*value*/) const { return 0.0; }
      };

      auto result = boost::apply_visitor(db_sum_visitor(), variant);
    #+END_SRC

** optional
   use ~boost::none~ to set empty value

** tuple
*** std::tie
    #+BEGIN_SRC cpp
    std::tie(i, f, d) = some_tuple;
    #+END_SRC

** others
   - boost::container::small_vector
   - boost::container::stack_vector
   - boost::container::flat_map
   - boost::container::static_vector

* Functional
** bind
   ~bind~: *copy* a value into a functional object
*** ~ref()~ & ~cref()~
    The ~ref()~ and ~cref()~ functions just construct an object of type ~reference_wrapper<T>~ or ~reference_wrapper<const T>~,
    which is implicitly convertible to a reference type.
*** hints
    If you are using the C++14 compiler, then use generic lambdas instead of ~std::bind~ and ~boost::bind~, as they are less obscure and simpler to understand.
    C++17 lambdas are usable with ~constexpr~, unlike ~std::bind~ and ~boost::bind~.

* Managing Resources

* Utilities
** [[http://boost.org/libs/algorithm][boost::algorithm]]
   - boost::algorithm::hex

** swap
   ~boost::swap~ first searches for a swap function in the namespace of a variable, and if there is
   no matching swap function, it uses the ~std::swap~.
