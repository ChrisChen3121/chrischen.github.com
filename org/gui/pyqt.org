#+TITLE: PyQt
#+KEYWORDS: python GUI qt
#+OPTIONS: H:3 toc:2 num:3 ^:nil
#+LaTeX: t
#+LANGUAGE: en-US
#+AUTHOR: ChrisChen
#+EMAIL: ChrisChen3121@gmail.com
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+SETUPFILE: ../../org-templates/level-1.org
* Modules
  - ~QtCore~
  - ~QtWidgets~
  - ~QtGui~

* Dialogs
** Dumb Dialogs
   We define a “dumb” dialog to be a dialog whose widgets are set to their initial
   values by the dialog’s caller, and whose final values are obtained directly from
   the widgets, again by the dialog’s caller.

   Dumb dialogs are normally modal dialogs with an “accept” button (e.g., OK ) and a
   “reject” button (e.g., Cancel ).
   #+BEGIN_SRC python
     dialog = FakeDlg(self.values_to_set, self)
     if dialog.exec_():
         self.values = dialog.someWidget.value()
   #+END_SRC

** Standard Dialogs
   We consider a dialog to be a “standard” dialog if it initializes its widgets in
   accordance with the values set through its initializer or through its methods,
   and whose final values are obtained by method calls or from instance variables—not
   directly from the dialog’s widgets.
   #+BEGIN_SRC python
     dialog = FakeDlg(self.values_to_set, self)
     if dialog.exec_():
         self.values = dialog.get_values()
   #+END_SRC

** Smart Dialogs
   We define a “smart” dialog to be one that initializes its widgets in accordance
   with data references or data structures that are passed to its initializer, and
   which is capable of updating the data directly in response to user interaction.
   #+BEGIN_SRC python
     dialog = FakeDlg(self.values_to_set, self)
     self.connect(dialog, SIGNAL("changed"), self.refreshSomeWidgets)
     dialog.show()
   #+END_SRC
*** Live
    #+BEGIN_SRC python
      if self.dialog is None:
          self.dialog = FakeDlg(
              self.values_to_set, self.refreshSomeWidgets, self)
      self.dialog.show()
      self.dialog.raise_()
      self.dialog.activateWindow()
    #+END_SRC

* Model
** ~QtCore.QModelIndex~
   Every data item in the model can be identified by a unique ~QModelIndex~.
   Each model index has three important attributes: a row, a column, and a parent.

** Model Classification
    - List(1D): Lists are just tables with a single column.
    - Table(2D)
    - Trees(Hierarchical)

*** ~QAbstractListModel~
*** ~QAbstractTableModel~
**** APIs for read-only
    - ~data(QModelIndex, role: int)~
    - ~rowCount()~
    - ~columnCount()~
    - ~headerData(section: int, Qt.Orientation, role: int)~

**** APIs for editable
    - ~flags(QModelIndex)~
      #+BEGIN_SRC python
        # example
        def flags(self, index):
            return Qt.ItemFlags(super.flags(index) | Qt.ItemIsEditable)
      #+END_SRC

    - ~setData(QModelIndex, value, role)~
    - ~insertRow(row: int, parent: QModelIndex)~
    - ~insertRows(row: int, count: int, parent: QModelIndex)~
    - ~removeRow(row: int, parent: QModelIndex)~
    - ~removeRows(row: int, count: int, parent: QModelIndex)~

*** ~QAbstractTreeModel~

*** ~QListWidget~, ~QTableWidget~, and ~QTreeWidget~
    are views with models and delegates aggregated inside them.

*** Pure Views
    ~QListView~, ~QTableView~, and ~QTreeView~

** Method
*** ~data~ & ~setData~

** Built-in Models
   - ~QStringListModel~
   - ~QDirModel~
   - ~QSqlTableModel~
